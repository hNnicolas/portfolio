import { forwardRef, useImperativeHandle, useRef, useState } from "react";
import { useGLTF, Text, Html, Float } from "@react-three/drei";
import ToggleFocusButton from "../utils/ToggleFocusButton.jsx";
import { useThree } from "@react-three/fiber";
import MagicBox from "./MagicBox";
import gsap from "gsap";

/**
 * Contains the Laptop scene used in the homepage.
 * @param {Object} props - The properties object.
 * @param {React.Ref} ref - The ref to be forwarded.
 * @returns {JSX.Element} Laptop scene component.
 */
const LaptopScene = forwardRef(({}, ref) => {

  // Font Reference
  const font = "./fonts/anek-bangla-v5-latin-500.woff";

  // State of properties
  const [isAnimating, setIsAnimating] = useState(false);

  // Scene reference
  const scene = useRef();
  const { camera } = useThree();

  // Forwarding the ref
  useImperativeHandle(ref, () => ({
    // Used to tell whether the scene is hidden or not
    scale: scene.current.scale,

    // Toggle the animation
    toggleAnimateOut: () => {
      // stop animation from being called multiple times
      if (!isAnimating) {
        // Set the state to animating
        setIsAnimating(true);

        // Toggle visibility
        scene.current.visible = true;

        // Toggle scale
        const targetScale =
          scene.current.scale.x === 1
            ? { x: 0, y: 0, z: 0 }
            : { x: 1, y: 1, z: 1 };

        // Animate the scale
        gsap.to(scene.current.scale, {
          duration: 0.5,
          x: targetScale.x,
          y: targetScale.y,
          z: targetScale.z,
          ease: "power2.inOut",
          onUpdate: () => {
            camera.updateProjectionMatrix();
          },
          // Hide the scene when the animation is complete
          onComplete: () => {
            if (targetScale.x === 0) {
              scene.current.visible = false;
            }
            setIsAnimating(false);
          },
        });
      }
    },
    // Toggle without the animation
    toggleOut: () => {
      // stop animation from being called multiple times
      if (!isAnimating) {
        // Set the state to animating
        setIsAnimating(true);

        // Toggle visibility
        scene.current.visible = true;

        // Toggle scale
        if (scene.current.scale.x > 0) {
          scene.current.scale.x = 0;
          scene.current.scale.y = 0;
          scene.current.scale.z = 0;

          // If the scale is 0, hide the scene
          scene.current.visible = false;
        } else {
          scene.current.scale.x = 1;
          scene.current.scale.y = 1;
          scene.current.scale.z = 1;
        }

        // Set the state to not animating
        setIsAnimating(false);
      }
    },
  }));

  return (
    <Float rotationIntensity={0.4} ref={scene}>
      
      {/* Group to contain the laptop and Iframe */}
      <group position-y={-1.2}>
        {/* Laptop Model */}
        <LaptopModel/>

        {/* My React Website */}
        <Html
          transform
          wrapperClass="htmlScreen"
          distanceFactor={1.14}
          position={[0, 1.52, -1.35]}
          rotation-x={-0.256}
          occlude="blending"
        >
          <iframe src="https://nicolashuang.netlify.app/" />
        </Html>
      </group>

      {/* Nicolas HUANG Name Text */}
      <Text
        font={font}
        fontSize={0.75}
        position={[2.5, 0.5, -0.3]}
        rotation-y={-1}
        rotation-z={0.1}
        maxWidth={2}
        lineHeight={1}
        color="#87ceeb"
      >
        Nicolas Huang
      </Text>

      {/* Tooltip Text */}
      <Text
        font={font}
        fontSize={0.125}
        position={[-2, 0.75, -1.25]}
        rotation={[-0, -0.1, 0]}
        maxWidth={2}
        lineHeight={1}
        color="#87ceeb"
      >
        {"Scroll me! â†’"}
      </Text>

      {/* Button to move closer to/away from the laptop */}
      <ToggleFocusButton position={[0, 1.6, -1.8]} />

      {/* Magic box display */}
      <MagicBox position={[2.8, 1.05, 0]} rotation={[-0.1, 1, 0]} />
    </Float>
  );
});

export default LaptopScene;


/**
 * Renders the 3D model of a laptop using r3f's useGLTF hook.
 * 
 * Auto-generated by: https://github.com/pmndrs/gltfjsx
 * @param {Object} props - The properties object to be passed to the group component which holds the model.
 * @returns {JSX.Element} The 3D model of the laptop.
*/
export function LaptopModel(props) {
  const group = useRef()
  const { nodes, materials } = useGLTF('https://threejs-journey.com/resources/models/macbook_model.gltf')
  return (
    <group ref={group} {...props} dispose={null}>
    <group position={[0, 0.52, 0,]} scale={[0.1, 0.1, 0.1,]} >

      {/* Main laptop geometries */}
      <mesh geometry={nodes.Circle001.geometry} material={nodes.Circle001.material} />
      <mesh geometry={nodes.Circle001_1.geometry} material={nodes.Circle001_1.material} />
      <mesh geometry={nodes.Circle001_2.geometry} material={materials.HeadPhoneHole} />
      <mesh geometry={nodes.Circle001_3.geometry} material={nodes.Circle001_3.material} />
      <mesh geometry={nodes.Circle001_4.geometry} material={nodes.Circle001_4.material} />
      <mesh geometry={nodes.Circle001_5.geometry} material={materials.TouchbarBorder} />
      <mesh geometry={nodes.Circle001_6.geometry} material={materials.Keyboard} />
      <mesh geometry={nodes.FrontCameraRing001.geometry} material={materials['CameraRIngBlack.002']} position={[-0.15, 19.57, -16.15,]} scale={5.8} />
      <mesh geometry={nodes.KeyboardKeyHole.geometry} material={nodes.KeyboardKeyHole.material} position={[-11.79, -0.15, -8.3,]} scale={5.8} />
      <mesh geometry={nodes.RubberFoot.geometry} material={materials.DarkRubber} position={[-11.95, -0.75, 7.86,]} scale={5.8} />

      {/* Hinge */}
      <group position={[0.01, -0.21, -10.56,]} scale={5.8} >
        <mesh geometry={nodes.Circle012.geometry} material={materials.HingeBlack} />
        <mesh geometry={nodes.Circle012_1.geometry} material={materials.HingeMetal} />
      </group>

      {/* The bottom of the laptop? */}
      <group position={[0, -0.51, 0,]} scale={5.8} >
        <mesh geometry={nodes.Circle006.geometry} material={nodes.Circle006.material} />
        <mesh geometry={nodes.Circle006_1.geometry} material={nodes.Circle006_1.material} />
      </group>

      {/* Keyboard geometries */}
      <group position={[-11.79, -0.15, -8.3,]} scale={5.8} >
        <mesh geometry={nodes.Circle.geometry} material={nodes.Circle.material} />
        <mesh geometry={nodes.Circle_1.geometry} material={materials.Key} />
        <mesh geometry={nodes.Circle_2.geometry} material={materials.Touchbar} />
      </group>

      {/* Screen section of laptop */}
      <group position={[0.01, -0.47, -10.41,]} rotation={[1.31, 0, 0,]} scale={5.8} >
        <mesh geometry={nodes.Circle002.geometry} material={nodes.Circle002.material} />
        <mesh geometry={nodes.Circle002_1.geometry} material={materials.Screen} />
        <mesh geometry={nodes.Circle002_2.geometry} material={materials.ScreenGlass} />

        {/* Purpose of geometry unclear, commented for performance */}
        {/* <mesh geometry={nodes.Circle002_3.geometry} material={materials.Rubber} /> */}
        {/* <mesh geometry={nodes.Circle002_4.geometry} material={materials.DisplayGlass} /> */}
        {/* <mesh geometry={nodes.AppleLogo000.geometry} material={materials['AppleLogo.004']} position={[0, -0.11, -1.8,]} rotation={[-Math.PI, 0, -Math.PI,]} scale={[0.58, 0.58, 0.58,]} /> */}
      </group>

      {/* I have no idea what this geometry is, but when I get rid of it it cuts the triangles for the scene in half.
          Scaling it up reveals what looks like a sheet of screw textures that got left in the model. */}
      {/* <group position={[-15.03, 0.03, 0.6,]} scale={5.8} >
        <mesh geometry={nodes.Circle009.geometry} material={nodes.Circle009.material} />
        <mesh geometry={nodes.Circle009_1.geometry} material={nodes.Circle009_1.material} />
      </group> */}
      
      <group position={[12.2, 0.03, 0.6,]} scale={5.8} >
        <mesh geometry={nodes.Circle003.geometry} material={nodes.Circle003.material} />
        <mesh geometry={nodes.Circle003_1.geometry} material={nodes.Circle003_1.material} />
      </group>
    </group>

    </group>
  )
}

useGLTF.preload('https://threejs-journey.com/resources/models/macbook_model.gltf')